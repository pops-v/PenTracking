import cv2
import numpy as np

# Initialize drawing parameters
drawing_color = (0, 255, 0)  # Green color for drawing
drawing_thickness = 10       # Thickness of the drawing
drawing = False              # Flag to indicate drawing mode
prev_point = None            # Previous point for line drawing

# Function to handle mouse events (drawing)
def draw(event, x, y, flags, param):
    global drawing, prev_point

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        prev_point = (x, y)
    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            cv2.line(frame, prev_point, (x, y), drawing_color, drawing_thickness)
            prev_point = (x, y)
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False

# Create trackbars for HSV color selection
def nothing(x):
    pass

cv2.namedWindow("Trackbars")
cv2.createTrackbar("L - H", "Trackbars", 0, 179, nothing)
cv2.createTrackbar("L - S", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("L - V", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("U - H", "Trackbars", 179, 179, nothing)
cv2.createTrackbar("U - S", "Trackbars", 255, 255, nothing)
cv2.createTrackbar("U - V", "Trackbars", 255, 255, nothing)

# Initialize camera
cap = cv2.VideoCapture(0)

# Set up the mouse callback function
cv2.namedWindow("Frame")
cv2.setMouseCallback("Frame", draw)

while True:
    _, frame = cap.read()
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Get trackbar positions for HSV range
    l_h = cv2.getTrackbarPos("L - H", "Trackbars")
    l_s = cv2.getTrackbarPos("L - S", "Trackbars")
    l_v = cv2.getTrackbarPos("L - V", "Trackbars")
    u_h = cv2.getTrackbarPos("U - H", "Trackbars")
    u_s = cv2.getTrackbarPos("U - S", "Trackbars")
    u_v = cv2.getTrackbarPos("U - V", "Trackbars")

    # Define lower and upper HSV boundaries for the pen tip color
    lower_color = np.array([l_h, l_s, l_v])
    upper_color = np.array([u_h, u_s, u_v])

    # Threshold the HSV image to get only desired colors
    mask = cv2.inRange(hsv, lower_color, upper_color)

    # Find contours of the masked area
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Draw contours on the original frame
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 100:  # Filter out small noise
            cv2.drawContours(frame, [contour], -1, (0, 255, 0), 3)
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Draw lines based on mouse events
    if drawing:
        cv2.line(frame, prev_point, prev_point, drawing_color, drawing_thickness)

    # Display the frames
    cv2.imshow("Frame", frame)
    cv2.imshow("Mask", mask)

    # Exit the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
